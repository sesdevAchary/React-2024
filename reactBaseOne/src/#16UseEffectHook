 /*useEffect= A react hook that is added up when
           the component re renders / mounts 

useEffect(function,[dependency])

useEffect(()=>{})   // runs after every re render 
useEffect ( ()=>{},[])
useEffect ( ()=>{},[value]) // runs only after mounting , unless  after every re rendering + value changes  */


const fadeAnimationHandler: AnimationHandler = (props, state): AnimationHandlerResponse => {  
    const transitionTime = props.transitionTime + 'ms';  
    const transitionTimingFunction = 'ease-in-out';  
   
    let slideStyle: React.CSSProperties = {  
        position: 'absolute',  
        display: 'block',  
        zIndex: -2,  
        minHeight: '100%',  
        opacity: 0,  
        top: 0,  
        right: 0,  
        left: 0,  
        bottom: 0,  
        transitionTimingFunction: transitionTimingFunction,  
        msTransitionTimingFunction: transitionTimingFunction,  
        MozTransitionTimingFunction: transitionTimingFunction,  
        WebkitTransitionTimingFunction: transitionTimingFunction,  
        OTransitionTimingFunction: transitionTimingFunction,  
    };  
   
    if (!state.swiping) {  
        slideStyle = {  
            ...slideStyle,  
            WebkitTransitionDuration: transitionTime,  
            MozTransitionDuration: transitionTime,  
            OTransitionDuration: transitionTime,  
            transitionDuration: transitionTime,  
            msTransitionDuration: transitionTime,  
        };  
    }  
   
    return {  
        slideStyle,  
        selectedStyle: { ...slideStyle, opacity: 1, position: 'relative' },  
        prevStyle: { ...slideStyle },  
    };  
};  