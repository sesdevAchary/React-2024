class TaskQueue {
  constructor(concurrency) {
    this.concurrency = concurrency;
    this.running = 0;
    this.queue = [];
  }

  push(task) {
    this.queue.push(task);
    this.next();
  }

  next() {
    while (this.running < this.concurrency && this.queue.length) {
      const task = this.queue.shift();
      this.running++;
      task().finally(() => {
        this.running--;
        this.next();
      });
    }
  }
}

// Usage
const queue = new TaskQueue(2);
const delay = (ms, id) => () => new Promise(res => {
  console.log(`Start ${id}`);
  setTimeout(() => { console.log(`End ${id}`); res(); }, ms);
});

queue.push(delay(1000, 'A'));
queue.push(delay(500, 'B'));
queue.push(delay(300, 'C'));
queue.push(delay(800, 'D'));
