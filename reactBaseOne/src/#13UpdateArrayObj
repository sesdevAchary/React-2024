function deepClone(obj, hash = new WeakMap()) {
  if (Object(obj) !== obj) return obj;
  if (hash.has(obj)) return hash.get(obj);
  const result = Array.isArray(obj) ? [] : {};
  hash.set(obj, result);
  for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
          result[key] = deepClone(obj[key], hash);
      }
  }
  return result;
}
function debounce(func, delay) {
  let timeout;
  return (...args) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), delay);
  };
}
function memoize(fn) {
  const cache = new Map();
  return function (...args) {
      const key = JSON.stringify(args);
      if (!cache.has(key)) {
          cache.set(key, fn.apply(this, args));
      }
      return cache.get(key);
  };
}
