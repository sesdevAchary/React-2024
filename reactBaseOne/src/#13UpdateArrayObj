function memoize(fn) {
  const cache = new Map();
  return function (...args) {
    const key = JSON.stringify(args);
    if (cache.has(key)) return cache.get(key);
    const result = fn(...args);
    cache.set(key, result);
    return result;
  };
}

// Usage
const factorial = memoize(function f(n) {
  return n <= 1 ? 1 : n * f(n - 1);
});
class EventEmitter {
  constructor() {
    this.events = {};
  }

  on(event, listener) {
    (this.events[event] ||= []).push(listener);
  }

  emit(event, ...args) {
    (this.events[event] || []).forEach(fn => fn(...args));
  }
}

// Usage
const emitter = new EventEmitter();
emitter.on("greet", name => console.log(`Hello, ${name}!`));
emitter.emit("greet", "Alice");
async function retry(fn, retries = 3, delay = 1000) {
  try {
    return await fn();
  } catch (e) {
    if (retries === 0) throw e;
    await new Promise(res => setTimeout(res, delay));
    return retry(fn, retries - 1, delay);
  }
}

// Usage
retry(() => fetch("https://api.example.com")).then(console.log);
function deepClone(obj, seen = new WeakMap()) {
  if (obj === null || typeof obj !== "object") return obj;
  if (seen.has(obj)) return seen.get(obj);
  const clone = Array.isArray(obj) ? [] : {};
  seen.set(obj, clone);
  for (let key in obj) {
    clone[key] = deepClone(obj[key], seen);
  }
  return clone;
}
function reactive(obj) {
  const deps = new Map();

  return new Proxy(obj, {
    get(target, prop) {
      if (!deps.has(prop)) deps.set(prop, []);
      deps.get(prop).push(currentEffect);
      return target[prop];
    },
    set(target, prop, value) {
      target[prop] = value;
      (deps.get(prop) || []).forEach(fn => fn());
      return true;
    }
  });
}

let currentEffect = () => {};
function watchEffect(effect) {
  currentEffect = effect;
  effect();
}

// Usage
const state = reactive({ count: 0 });
watchEffect(() => console.log("Count is", state.count));
state.count++;
function curry(fn) {
  return function curried(...args) {
    return args.length >= fn.length
      ? fn.apply(this, args)
      : (...next) => curried(...args, ...next);
  };
}

// Usage
const sum = (a, b, c) => a + b + c;
const curriedSum = curry(sum);
console.log(curriedSum(1)(2)(3)); // 6
function validate(obj, schema) {
  return new Proxy(obj, {
    set(target, prop, value) {
      if (!schema[prop](value)) {
        throw new Error(`Invalid value for ${prop}`);
      }
      target[prop] = value;
      return true;
    }
  });
}

// Usage
const user = validate({}, {
  age: v => typeof v === "number" && v > 0
});
user.age = 30; // OK
// user.age = -5; // Error
function withLogging(fn) {
  return function (...args) {
    console.log(`Calling ${fn.name} with`, args);
    const result = fn(...args);
    console.log(`Result:`, result);
    return result;
  };
}

// Usage
const add = (a, b) => a + b;
const loggedAdd = withLogging(add);
loggedAdd(3, 4);
function validate(obj, schema) {
  return new Proxy(obj, {
    set(target, prop, value) {
      if (!schema[prop](value)) {
        throw new Error(`Invalid value for ${prop}`);
      }
      target[prop] = value;
      return true;
    }
  });
}

// Usage
const user = validate({}, {
  age: v => typeof v === "number" && v > 0
});
user.age = 30; // OK
// user.age = -5; // Error
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}
import React, { useState, useEffect } from 'react';

function Users() {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    fetch('https://jsonplaceholder.typicode.com/users')
      .then(res => res.json())
      .then(data => setUsers(data));
  }, []);

  return (
    <ul>
      {users.map(user => <li key={user.id}>{user.name}</li>)}
    </ul>
  );
}
