class TaskQueue {
  constructor(concurrency) {
    this.concurrency = concurrency;
    this.running = 0;
    this.queue = [];
  }

  push(task) {
    this.queue.push(task);
    this.next();
  }

  next() {
    while (this.running < this.concurrency && this.queue.length) {
      const task = this.queue.shift();
      this.running++;
      task().finally(() => {
        this.running--;
        this.next();
      });
    }
  }
}

// Usage
const queue = new TaskQueue(2);
const delay = (ms, id) => () => new Promise(res => {
  console.log(`Start ${id}`);
  setTimeout(() => { console.log(`End ${id}`); res(); }, ms);
});

queue.push(delay(1000, 'A'));
queue.push(delay(500, 'B'));
queue.push(delay(300, 'C'));
queue.push(delay(800, 'D'));
const targetMap = new WeakMap();
let activeEffect = null;

function reactive(target) {
  return new Proxy(target, {
    get(obj, key) {
      track(obj, key);
      return Reflect.get(obj, key);
    },
    set(obj, key, value) {
      const result = Reflect.set(obj, key, value);
      trigger(obj, key);
      return result;
    }
  });
}

function track(target, key) {
  if (!activeEffect) return;
  let depsMap = targetMap.get(target);
  if (!depsMap) targetMap.set(target, (depsMap = new Map()));
  let dep = depsMap.get(key);
  if (!dep) depsMap.set(key, (dep = new Set()));
  dep.add(activeEffect);
}

function trigger(target, key) {
  const depsMap = targetMap.get(target);
  if (!depsMap) return;
  const dep = depsMap.get(key);
  dep && dep.forEach(effect => effect());
}

function effect(fn) {
  activeEffect = fn;
  fn();
  activeEffect = null;
}

// Usage
const state = reactive({ count: 0 });
effect(() => console.log(`Count is: ${state.count}`));
state.count++;
function debounce(delay = 300) {
  return function (_target, _key, descriptor) {
    const original = descriptor.value;
    let timer;
    descriptor.value = function (...args) {
      clearTimeout(timer);
      timer = setTimeout(() => original.apply(this, args), delay);
    };
    return descriptor;
  };
}

class Search {
  @debounce(500)
  query(term) {
    console.log(`Searching for ${term}`);
  }
}

const s = new Search();
s.query("hello");
s.query("hello world"); // Only this will be logged after 500ms
