class TaskQueue {
  constructor(concurrency) {
    this.concurrency = concurrency;
    this.running = 0;
    this.queue = [];
  }

  push(task) {
    this.queue.push(task);
    this.next();
  }

  next() {
    while (this.running < this.concurrency && this.queue.length) {
      const task = this.queue.shift();
      this.running++;
      task().finally(() => {
        this.running--;
        this.next();
      });
    }
  }
}

// Usage
const queue = new TaskQueue(2);
const delay = (ms, id) => () => new Promise(res => {
  console.log(`Start ${id}`);
  setTimeout(() => { console.log(`End ${id}`); res(); }, ms);
});

queue.push(delay(1000, 'A'));
queue.push(delay(500, 'B'));
queue.push(delay(300, 'C'));
queue.push(delay(800, 'D'));
const targetMap = new WeakMap();
let activeEffect = null;

function reactive(target) {
  return new Proxy(target, {
    get(obj, key) {
      track(obj, key);
      return Reflect.get(obj, key);
    },
    set(obj, key, value) {
      const result = Reflect.set(obj, key, value);
      trigger(obj, key);
      return result;
    }
  });
}

function track(target, key) {
  if (!activeEffect) return;
  let depsMap = targetMap.get(target);
  if (!depsMap) targetMap.set(target, (depsMap = new Map()));
  let dep = depsMap.get(key);
  if (!dep) depsMap.set(key, (dep = new Set()));
  dep.add(activeEffect);
}

function trigger(target, key) {
  const depsMap = targetMap.get(target);
  if (!depsMap) return;
  const dep = depsMap.get(key);
  dep && dep.forEach(effect => effect());
}

function effect(fn) {
  activeEffect = fn;
  fn();
  activeEffect = null;
}

// Usage
const state = reactive({ count: 0 });
effect(() => console.log(`Count is: ${state.count}`));
state.count++;
function debounce(delay = 300) {
  return function (_target, _key, descriptor) {
    const original = descriptor.value;
    let timer;
    descriptor.value = function (...args) {
      clearTimeout(timer);
      timer = setTimeout(() => original.apply(this, args), delay);
    };
    return descriptor;
  };
}

class Search {
  @debounce(500)
  query(term) {
    console.log(`Searching for ${term}`);
  }
}

const s = new Search();
s.query("hello");
s.query("hello world"); // Only this will be logged after 500ms
let currentComponent = null;
let hookIndex = 0;

function useState(initial) {
  const hooks = currentComponent.hooks;
  if (hooks.length <= hookIndex) {
    hooks.push(initial);
  }
  const stateIndex = hookIndex;
  const setState = newVal => {
    hooks[stateIndex] = newVal;
    render(currentComponent);
  };
  return [hooks[hookIndex++], setState];
}

function useEffect(fn, deps) {
  const hooks = currentComponent.hooks;
  const oldDeps = hooks[hookIndex];
  const hasChanged = !oldDeps || deps.some((d, i) => d !== oldDeps[i]);
  if (hasChanged) {
    fn();
    hooks[hookIndex] = deps;
  }
  hookIndex++;
}

function render(Component) {
  hookIndex = 0;
  currentComponent = Component;
  Component.render();
}

// Example Component
const MyComponent = {
  hooks: [],
  render() {
    const [count, setCount] = useState(0);
    useEffect(() => console.log("Effect triggered: ", count), [count]);
    console.log("Rendered with count:", count);
    setTimeout(() => setCount(count + 1), 1000);
  }
};

render(MyComponent);

class EventEmitter {
  constructor() {
    this.listeners = new Map();
  }

  on(event, fn) {
    if (!this.listeners.has(event)) this.listeners.set(event, []);
    this.listeners.get(event).push(fn);
  }

  emit(event, ...args) {
    const exact = this.listeners.get(event) || [];
    const wildcard = [...this.listeners.entries()]
      .filter(([k]) => k.includes('*') && this._match(k, event))
      .flatMap(([, v]) => v);

    [...exact, ...wildcard].forEach(fn => fn(...args));
  }

  _match(pattern, event) {
    const regex = new RegExp('^' + pattern.replace(/\*/g, '.*') + '$');
    return regex.test(event);
  }
}

// Usage
const emitter = new EventEmitter();
emitter.on('user.*', (data) => console.log('Wildcard:', data));
emitter.on('user.login', (data) => console.log('Login:', data));
emitter.emit('user.login', { name: 'Alice' });
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function demo() {
  console.log('Wait...');
  await sleep(1000);
  console.log('Done!');
}
demo();
function getQueryParams(url) {
  return Object.fromEntries(new URL(url).searchParams);
}
console.log(getQueryParams('https://example.com?page=2&sort=asc'));
function removeDuplicates(arr) {
  return [...new Set(arr)];
}
console.log(removeDuplicates([1, 2, 2, 3, 4, 4])); // Output: [1, 2, 3, 4]
function copyToClipboard(text) {
  navigator.clipboard.writeText(text).then(() => {
    console.log('Copied!');
  });
}
