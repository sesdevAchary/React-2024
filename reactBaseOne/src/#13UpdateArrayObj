import { useState } from "react";

export default function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <h1>{count}</h1>
      <button onClick={() => setCount(count + 1)}>Increase</button>
    </div>
  );
}
import { useEffect, useState } from "react";

export default function FetchData() {
  const [data, setData] = useState([]);

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/posts")
      .then((res) => res.json())
      .then((data) => setData(data));
  }, []);

  return (
    <ul>
      {data.slice(0, 5).map((item) => (
        <li key={item.id}>{item.title}</li>
      ))}
    </ul>
  );
}
import { useState } from "react";

export default function ToggleText() {
  const [show, setShow] = useState(false);

  return (
    <div>
      <button onClick={() => setShow(!show)}>
        {show ? "Hide" : "Show"} Text
      </button>
      {show && <p>Hello, I am visible!</p>}
    </div>
  );
}
import { useState } from "react";

export default function FormExample() {
  const [input, setInput] = useState("");

  return (
    <div>
      <input value={input} onChange={(e) => setInput(e.target.value)} />
      <p>You typed: {input}</p>
    </div>
  );
}
import { useState } from "react";

export default function DarkModeToggle() {
  const [dark, setDark] = useState(false);

  return (
    <div style={{ background: dark ? "#333" : "#fff", color: dark ? "#fff" : "#000", height: "100vh" }}>
      <button onClick={() => setDark(!dark)}>Toggle Dark Mode</button>
    </div>
  );
}
import { useState } from "react";

export default function Accordion() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div>
      <h2 onClick={() => setIsOpen(!isOpen)}>Click to {isOpen ? "Collapse" : "Expand"}</h2>
      {isOpen && <p>This is hidden content!</p>}
    </div>
  );
}
import { useState } from "react";

export default function TodoList() {
  const [todos, setTodos] = useState([]);
  const [task, setTask] = useState("");

  const addTask = () => {
    setTodos([...todos, task]);
    setTask("");
  };

  return (
    <div>
      <input value={task} onChange={(e) => setTask(e.target.value)} />
      <button onClick={addTask}>Add</button>
      <ul>
        {todos.map((todo, index) => (<li key={index}>{todo}</li>))}
      </ul>
    </div>
  );
}
import { useState } from "react";

export default function ModalExample() {
  const [open, setOpen] = useState(false);

  return (
    <div>
      <button onClick={() => setOpen(true)}>Open Modal</button>
      {open && (
        <div style={{ position: "fixed", top: "30%", left: "30%", background: "white", padding: "20px", border: "1px solid black" }}>
          <h2>Modal Title</h2>
          <button onClick={() => setOpen(false)}>Close</button>
        </div>
      )}
    </div>
  );
}
for (let i = 1; i <= 30; i++) {
  let output = '';
  if (i % 3 === 0) output += 'Fizz';
  if (i % 5 === 0) output += 'Buzz';
  console.log(output || i);
}
function randomColor() {
  return '#' + Math.floor(Math.random() * 16777215).toString(16);
}
console.log(randomColor());
function copyText(text) {
  navigator.clipboard.writeText(text).then(() => {
    console.log('Text copied!');
  });
}
copyText('Hello, world!');
function debounce(func, delay) {
  let timer;
  return function (...args) {
    clearTimeout(timer);
    timer = setTimeout(() => func.apply(this, args), delay);
  };
}
function isPalindrome(str) {
  const cleanStr = str.toLowerCase().replace(/[^a-z0-9]/g, '');
  return cleanStr === cleanStr.split('').reverse().join('');
}
console.log(isPalindrome('A man, a plan, a canal: Panama'));
const numbers = [5, 12, 8, 130, 44];
const max = Math.max(...numbers);
console.log(max);
const numbers = [5, 12, 8, 130, 44];
const max = Math.max(...numbers);
console.log(max);
function shuffleArray(arr) {
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}
console.log(shuffleArray([1, 2, 3, 4, 5]));
document.getElementById("myButton").addEventListener("click", () => {
  alert("Button clicked!");
});
fetch('https://api.example.com/data')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));
  const num = 5;
  console.log(num % 2 === 0 ? "Even" : "Odd");
  const randomNum = Math.floor(Math.random() * 100) + 1;
console.log(randomNum);
let count = 10;
const interval = setInterval(() => {
  console.log(count);
  count--;
  if (count < 0) {
    clearInterval(interval);
    console.log("Countdown finished!");
  }
}, 1000);
function toggleDarkMode() {
  document.body.classList.toggle("dark-mode");
}

function validateForm() {
  const name = document.forms["myForm"]["name"].value;
  if (name === "") {
    alert("Name must be filled out");
    return false;
  }
}const now = new Date();
console.log(now.toLocaleString());

const now = new Date();
console.log(now.toLocaleString());
function deepClone(obj, hash = new WeakMap()) {
  if (obj === null || typeof obj !== 'object') return obj;
  if (hash.has(obj)) return hash.get(obj);

  const clone = Array.isArray(obj) ? [] : {};
  hash.set(obj, clone);

  Reflect.ownKeys(obj).forEach(key => {
      clone[key] = deepClone(obj[key], hash);
  });

  return clone;
}
function customPromiseAll(promises) {
  return new Promise((resolve, reject) => {
      const results = [];
      let completed = 0;

      promises.forEach((p, index) => {
          Promise.resolve(p)
              .then(value => {
                  results[index] = value;
                  completed += 1;
                  if (completed === promises.length) resolve(results);
              })
              .catch(reject);
      });
  });
}
function add(a) {
  let sum = a;

  function inner(b) {
      if (b !== undefined) {
          sum += b;
          return inner;
      }
      return sum;
  }

  return inner;
}

// Usage: add(2)(3)(4)() â†’ 9

function memoize(fn) {
  const cache = new Map();

  return function(...args) {
      const key = JSON.stringify(args);
      if (cache.has(key)) return cache.get(key);
      const result = fn.apply(this, args);
      cache.set(key, result);
      return result;
  };
}
class EventEmitter {
  constructor() {
      this.events = {};
  }

  on(event, listener) {
      (this.events[event] ||= []).push(listener);
  }

  emit(event, data) {
      (this.events[event] || []).forEach(fn => fn(data));
  }

  off(event, listenerToRemove) {
      this.events[event] = (this.events[event] || []).filter(fn => fn !== listenerToRemove);
  }
}
function diff(oldNode, newNode) {
  if (!newNode) return { type: 'REMOVE', oldNode };
  if (!oldNode) return { type: 'ADD', newNode };
  if (typeof oldNode !== typeof newNode || oldNode.type !== newNode.type)
      return { type: 'REPLACE', newNode };

  if (typeof oldNode === 'string' && oldNode !== newNode)
      return { type: 'TEXT', newNode };

  const changes = [];
  const maxLength = Math.max(oldNode.children.length, newNode.children.length);

  for (let i = 0; i < maxLength; i++) {
      changes.push(diff(oldNode.children[i], newNode.children[i]));
  }

  return { type: 'UPDATE', changes };
}
function reactive(obj) {
  return new Proxy(obj, {
      get(target, key) {
          console.log(`Getting ${key}: ${target[key]}`);
          return target[key];
      },
      set(target, key, value) {
          console.log(`Setting ${key} to ${value}`);
          target[key] = value;
          return true;
      }
  });
}
async function retry(fn, retries = 3, delay = 1000) {
  for (let i = 0; i < retries; i++) {
      try {
          return await fn();
      } catch (e) {
          if (i === retries - 1) throw e;
          await new Promise(res => setTimeout(res, delay));
      }
  }
}
function trampoline(fn) {
  return function(...args) {
      let result = fn.apply(this, args);
      while (typeof result === 'function') {
          result = result();
      }
      return result;
  };
}

function sum(x, y) {
  if (y === 0) return x;
  return () => sum(x + 1, y - 1);
}

const trampolinedSum = trampoline(sum);
// trampolinedSum(1, 100000) // won't cause stack overflow
let a = 5;
let b = 3;
let sum = a + b;
console.log("Sum:", sum);
let number = 7;
if (number % 2 === 0) {
  console.log("Even");
} else {
  console.log("Odd");
}
let fruits = ["apple", "banana", "cherry"];
for (let i = 0; i < fruits.length; i++) {
  console.log(fruits[i]);
}
function greet(name) {
  console.log("Hello, " + name + "!");
}
greet("Alice");
function celsiusToFahrenheit(celsius) {
  return (celsius * 9/5) + 32;
}
console.log(celsiusToFahrenheit(25)); // 77
let x = 10, y = 20;
let max = x > y ? x : y;
console.log("Max:", max);
let randomNum = Math.floor(Math.random() * 101);
console.log("Random number:", randomNum);
let str = "JavaScript";
let reversed = str.split("").reverse().join("");
console.log(reversed); // tpircSavaJ
setTimeout(() => {
  console.log("This prints after 2 seconds");
}, 2000);
async function fetchUser() {
  try {
    let response = await fetch('https://jsonplaceholder.typicode.com/users/1');
    let user = await response.json();
    console.log(user);
  } catch (error) {
    console.error('Error fetching user:', error);
  }
}
fetchUser();
function debounce(func, delay) {
  let timer;
  return function(...args) {
    clearTimeout(timer);
    timer = setTimeout(() => func.apply(this, args), delay);
  };
}

// Usage
window.addEventListener('resize', debounce(() => {
  console.log('Resized');
}, 300));
function customPromise(success = true) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      success ? resolve("Resolved!") : reject("Rejected!");
    }, 1000);
  });
}

customPromise().then(console.log).catch(console.error);
function flattenArray(arr) {
  return arr.reduce((flat, toFlatten) =>
    flat.concat(Array.isArray(toFlatten) ? flattenArray(toFlatten) : toFlatten), []);
}

console.log(flattenArray([1, [2, [3, 4], 5]])); // [1, 2, 3, 4, 5]
function memoize(fn) {
  const cache = {};
  return function(...args) {
    const key = JSON.stringify(args);
    if (cache[key]) return cache[key];
    return cache[key] = fn.apply(this, args);
  };
}

const slowAdd = (a, b) => {
  console.log('Calculating...');
  return a + b;
};

const fastAdd = memoize(slowAdd);
console.log(fastAdd(3, 4)); // Logs Calculating...
console.log(fastAdd(3, 4)); // Uses cache
function binarySearch(arr, target) {
  let left = 0, right = arr.length - 1;
  while (left <= right) {
    let mid = Math.floor((left + right) / 2);
    if (arr[mid] === target) return mid;
    else if (arr[mid] < target) left = mid + 1;
    else right = mid - 1;
  }
  return -1;
}

console.log(binarySearch([1, 2, 3, 4, 5, 6], 4)); // Output: 3
function permute(str, l = 0, r = str.length - 1) {
  if (l === r) console.log(str);
  else {
    for (let i = l; i <= r; i++) {
      str = swap(str, l, i);
      permute(str, l + 1, r);
      str = swap(str, l, i); // backtrack
    }
  }
}

function swap(s, i, j) {
  let arr = s.split('');
  [arr[i], arr[j]] = [arr[j], arr[i]];
  return arr.join('');
}

permute("ABC");
let index = 0;
const images = ["img1.jpg", "img2.jpg", "img3.jpg"];
const imgElement = document.getElementById("carousel");

function showImage(i) {
  imgElement.src = images[i];
}

document.getElementById("next").onclick = () => {
  index = (index + 1) % images.length;
  showImage(index);
};
function memoize(fn) {
  const cache = {};
  return function(...args) {
    const key = JSON.stringify(args);
    if (cache[key]) return cache[key];
    const result = fn(...args);
    cache[key] = result;
    return result;
  };
}

const slowAdd = (a, b) => {
  for (let i = 0; i < 1e6; i++) {} // Simulate heavy computation
  return a + b;
};

const fastAdd = memoize(slowAdd);
console.log(fastAdd(5, 10));
