const ModuleSystem = (() => {
  const modules = {};
  return {
    define(name, deps, factory) {
      modules[name] = { deps, factory, instance: null };
    },
    require(name) {
      const m = modules[name];
      if (!m.instance) {
        m.instance = m.factory(...m.deps.map(dep => this.require(dep)));
      }
      return m.instance;
    }
  };
})();
class Observable {
  constructor() {
    this.subscribers = [];
  }

  subscribe(fn) {
    this.subscribers.push(fn);
    return () => this.subscribers = this.subscribers.filter(sub => sub !== fn);
  }

  notify(data) {
    this.subscribers.forEach(fn => fn(data));
  }
}
function reactive(obj, onChange) {
  return new Proxy(obj, {
    set(target, key, value) {
      target[key] = value;
      onChange(key, value);
      return true;
    }
  });
}
class StateMachine {
  constructor(states, initial) {
    this.states = states;
    this.state = initial;
  }

  transition(event) {
    const next = this.states[this.state][event];
    if (next) this.state = next;
    return this.state;
  }
}
function memoize(fn, ttl = 1000) {
  const cache = new Map();
  return function(...args) {
    const key = JSON.stringify(args);
    const now = Date.now();

    if (cache.has(key) && now - cache.get(key).time < ttl) {
      return cache.get(key).value;
    }

    const result = fn(...args);
    cache.set(key, { value: result, time: now });
    return result;
  };
}
Memoization with Cache Expiry
class MyPromise {
  constructor(executor) {
    this.value = null;
    this.callbacks = [];
    executor(this.resolve.bind(this));
  }

  resolve(value) {
    this.value = value;
    this.callbacks.forEach(cb => cb(value));
  }

  then(callback) {
    if (this.value !== null) callback(this.value);
    else this.callbacks.push(callback);
    return this;
  }
}
class TaskQueue {
  constructor() {
    this.queue = [];
    this.running = false;
  }

  add(task) {
    this.queue.push(task);
    if (!this.running) this.run();
  }

  async run() {
    this.running = true;
    while (this.queue.length) {
      await this.queue.shift()();
    }
    this.running = false;
  }
}
function delegate(parent, type, selector, handler) {
  parent.addEventListener(type, function(event) {
    let target = event.target;
    while (target && target !== parent) {
      if (target.matches(selector)) {
        handler.call(target, event);
        return;
      }
      target = target.parentElement;
    }
  });
}
function h(type, props, ...children) {
  return { type, props, children };
}

function render(vnode) {
  if (typeof vnode === "string") return document.createTextNode(vnode);

  const el = document.createElement(vnode.type);
  for (const key in vnode.props) el.setAttribute(key, vnode.props[key]);

  vnode.children.forEach(child => el.appendChild(render(child)));
  return el;
}
function deepClone(obj, seen = new WeakMap()) {
  if (obj === null || typeof obj !== 'object') return obj;
  if (seen.has(obj)) return seen.get(obj);

  const clone = Array.isArray(obj) ? [] : {};
  seen.set(obj, clone);

  for (const key in obj) {
    clone[key] = deepClone(obj[key], seen);
  }
  return clone;
}
document.addEventListener('DOMContentLoaded', () => {
  const dropZone = document.getElementById('drop-zone');

  dropZone.addEventListener('dragover', e => {
    e.preventDefault();
    dropZone.classList.add('dragover');
  });

  dropZone.addEventListener('dragleave', () => {
    dropZone.classList.remove('dragover');
  });

  dropZone.addEventListener('drop', e => {
    e.preventDefault();
    dropZone.classList.remove('dragover');
    const files = [...e.dataTransfer.files];
    console.log('Dropped files:', files);
    // Handle file upload here
  });
});
function promiseAll(promises) {
  return new Promise((resolve, reject) => {
    let results = [];
    let count = 0;
    promises.forEach((p, i) => {
      Promise.resolve(p).then(value => {
        results[i] = value;
        if (++count === promises.length) resolve(results);
      }).catch(reject);
    });
  });
}
class LRUCache {
  constructor(limit) {
    this.cache = new Map();
    this.limit = limit;
  }

  get(key) {
    if (!this.cache.has(key)) return -1;
    const value = this.cache.get(key);
    this.cache.delete(key);
    this.cache.set(key, value);
    return value;
  }

  put(key, value) {
    if (this.cache.has(key)) this.cache.delete(key);
    else if (this.cache.size >= this.limit) this.cache.delete(this.cache.keys().next().value);
    this.cache.set(key, value);
  }
}
