const ModuleSystem = (() => {
  const modules = {};
  return {
    define(name, deps, factory) {
      modules[name] = { deps, factory, instance: null };
    },
    require(name) {
      const m = modules[name];
      if (!m.instance) {
        m.instance = m.factory(...m.deps.map(dep => this.require(dep)));
      }
      return m.instance;
    }
  };
})();
class Observable {
  constructor() {
    this.subscribers = [];
  }

  subscribe(fn) {
    this.subscribers.push(fn);
    return () => this.subscribers = this.subscribers.filter(sub => sub !== fn);
  }

  notify(data) {
    this.subscribers.forEach(fn => fn(data));
  }
}
function reactive(obj, onChange) {
  return new Proxy(obj, {
    set(target, key, value) {
      target[key] = value;
      onChange(key, value);
      return true;
    }
  });
}
class StateMachine {
  constructor(states, initial) {
    this.states = states;
    this.state = initial;
  }

  transition(event) {
    const next = this.states[this.state][event];
    if (next) this.state = next;
    return this.state;
  }
}
function memoize(fn, ttl = 1000) {
  const cache = new Map();
  return function(...args) {
    const key = JSON.stringify(args);
    const now = Date.now();

    if (cache.has(key) && now - cache.get(key).time < ttl) {
      return cache.get(key).value;
    }

    const result = fn(...args);
    cache.set(key, { value: result, time: now });
    return result;
  };
}
Memoization with Cache Expiry