<input id="userInput" placeholder="Type your message" />
<button onclick="sendMessage()">Send</button>
<div id="chatBox"></div>

<script>
  async function sendMessage() {
    const input = document.getElementById('userInput').value;
    const reply = await getChatGPTResponse(input);
    document.getElementById('chatBox').innerHTML += `<p><strong>You:</strong> ${input}</p>`;
    document.getElementById('chatBox').innerHTML += `<p><strong>ChatGPT:</strong> ${reply}</p>`;
  }
</script>
function debounce(func, delay) {
  let timeout;
  return function(...args) {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), delay);
  };
}
function deepClone(obj) {
  return JSON.parse(JSON.stringify(obj));
}
function getRandomHexColor() {
  return '#' + Math.floor(Math.random()*16777215).toString(16).padStart(6, '0');
}
function copyToClipboard(text) {
  navigator.clipboard.writeText(text).then(() => {
    console.log('Text copied to clipboard');
  }).catch(err => {
    console.error('Error copying text: ', err);
  });
}
function isPalindrome(str) {
  const cleaned = str.toLowerCase().replace(/[^a-z0-9]/g, '');
  return cleaned === cleaned.split('').reverse().join('');
}

async function getUserIP() {
  const response = await fetch('https://api.ipify.org?format=json');
  const data = await response.json();
  console.log('Your IP Address is:', data.ip);
}
function throttle(func, limit) {
  let inThrottle;
  return function(...args) {
    if (!inThrottle) {
      func.apply(this, args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  };
}
function isDarkMode() {
  return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
}
function copyToClipboard(text) {
  navigator.clipboard.writeText(text).then(() => {
    console.log('Text copied to clipboard');
  }).catch(err => {
    console.error('Error copying text: ', err);
  });
}
function deepClone(obj) {
  return JSON.parse(JSON.stringify(obj));
}
async function getChatGPTResponse(prompt) {
  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': 'Bearer YOUR_API_KEY',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: 'gpt-4',
      messages: [{ role: 'user', content: prompt }]
    })
  });
  const data = await response.json();
  return data.choices[0].message.content;
}
<input id="userInput" placeholder="Type your message" />
<button onclick="sendMessage()">Send</button>
<div id="chatBox"></div>

<script>
  async function sendMessage() {
    const input = document.getElementById('userInput').value;
    const reply = await getChatGPTResponse(input);
    document.getElementById('chatBox').innerHTML += `<p><strong>You:</strong> ${input}</p>`;
    document.getElementById('chatBox').innerHTML += `<p><strong>ChatGPT:</strong> ${reply}</p>`;
  }
</script>
function deepClone(obj) {
  return JSON.parse(JSON.stringify(obj));
}
function flatten(arr) {
  return arr.reduce((flat, toFlatten) =>
    flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten), []);
}
console.log(flatten([1, [2, [3, 4], 5]])); // [1, 2, 3, 4, 5]
const isDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
console.log(isDark ? "Dark mode" : "Light mode");
function factorial(n) {
  return n <= 1 ? 1 : n * factorial(n - 1);
}
console.log(factorial(5)); // 120
function debounce(fn, delay) {
  let timeoutId;
  return (...args) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => fn(...args), delay);
  };
}
function getRandomHexColor() {
  return '#' + Math.floor(Math.random()*16777215).toString(16);
}
console.log(getRandomHexColor());
function isPalindrome(str) {
  const clean = str.toLowerCase().replace(/[^a-z0-9]/g, '');
  return clean === clean.split('').reverse().join('');
}
console.log(isPalindrome("A man a plan a canal Panama")); // true
fetch('https://api.example.com/data')
  .then(res => res.json())
  .then(data => console.log(data))
  .catch(err => console.error(err));
  let count = 5;
  let timer = setInterval(() => {
    console.log(count);
    count--;
    if (count < 0) {
      clearInterval(timer);
      console.log("Time's up!");
    }
  }, 1000);
  function isEven(num) {
    return num % 2 === 0 ? "Even" : "Odd";
  }
  console.log(isEven(7)); // "Odd"
  function flatten(arr) {
    return arr.reduce((flat, toFlatten) =>
      flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten), []);
  }
  console.log(flatten([1, [2, [3, 4], 5]])); // [1, 2, 3, 4, 5]
  function flatten(arr) {
    return arr.reduce((flat, toFlatten) =>
      flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten), []);
  }
  console.log(flatten([1, [2,3,4,5,6 [3, 4], 5]])); // [1, 2, 3, 4, 5]
  const debounce = (fn, delay) => {
    let timeout;
    return (...args) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => fn(...args), delay);
    };
  };
  const handleResize = debounce(() => {
    console.log('Resized!');
  }, 500);
  
  window.addEventListener('resize', handleResize);
  function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
  const original = { a: 1, b: { c: 2 } };
const clone = deepClone(original);
console.log(clone); // { a: 1, b: { c: 2 } }
const memoize = (fn) => {
  const cache = {};
  return (...args) => {
    const key = JSON.stringify(args);
    if (!cache[key]) {
      cache[key] = fn(...args);
    }
    return cache[key];
  };
};
const factorial = memoize((n) => (n <= 1 ? 1 : n * factorial(n - 1)));
console.log(factorial(5)); // 120
const deepFlatten = (arr) => arr.flat(Infinity);
const curry = (fn) => 
  (...args) => 
    args.length >= fn.length ? fn(...args) : curry(fn.bind(null, ...args));
const add = (a, b, c) => a + b + c;
const curriedAdd = curry(add);
console.log(curriedAdd(1)(2)(3)); // 6


const handler = {
  get: (target, prop) => {
    console.log(`Accessing property: ${prop}`);
    return target[prop];
  },
};

const user = { name: 'Alice', age: 30 };
const proxyUser = new Proxy(user, handler);

console.log(proxyUser.name); // Logs: Accessing property: name
